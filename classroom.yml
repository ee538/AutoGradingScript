name: GitHub Classroom Workflow

on: [push, pull_request]
    
jobs:
  setup:
    name: Loading data
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.load.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3 
      - id: load
        name: Load data
        run: |
             file_datetime=$(date --date="$(grep -P '^.+\d\d\d\d$' ScoresCodingTotal.txt | tail -1 )" +"%Y%m%d%H%M%S")
             current_timestamp=$(date -d -1hours +"%Y%m%d%H%M%S")
             echo 'last grading: ' $file_datetime
             echo 'current time: ' $current_timestamp
             if [[ "$file_datetime" =~ ^[0-9]{14}$ && ! "$file_datetime" =~ ^[0-9]{8}000000$ ]]; then
                 if [ "$current_timestamp" -le "$file_datetime" ]; then
                     echo 'You are submitting too frequently.'
                     echo 'The auto grader does not work this way.'
                     echo 'Please do not abuse it.'
                     echo 'Ignore Submission.'
                     gh run cancel ${{ github.run_id }}
                     gh run watch ${{ github.run_id }}
                     echo 'exit'
                 fi
             fi
             
             # read 'config.json' file to 'data' variable
             data=`cat .github/workflows/config.json | tr '\n' ' ' | tr '\r' ' '`

             # pass 'data' variable to the next job, see github workflow api
             # echo "::set-output name=matrix::$data"
             echo "matrix=$data"  >> $GITHUB_OUTPUT

  testing:
    name: Grading Q${{matrix.q_num}}
    needs: setup
    continue-on-error: true
    runs-on: ubuntu-22.04
    timeout-minutes: 3
    strategy:
        matrix:
            # this job will be generated dynamically depending on the 'q_nums' read from json
            q_num: ${{ fromJSON(needs.setup.outputs.matrix).q_nums }}
    steps:
      - uses: actions/checkout@v3 
      - uses: actions/checkout@master
        with:
            # this repository is the one that contains 'grader tests'
            repository: ${{ fromJSON(needs.setup.outputs.matrix).grader_repo }}
            path: 'coding_grader'
      - name: Clear previous test result
        if: always()
        run: |
            echo "" > Q${{matrix.q_num}}res_.txt
      - name: Prepare for the test result
        # this part was initially written to use an empty file to replace the previous grading result
        # it maybe can be removed, but needs further testing
        # please contact yudewei@usc.edu
        uses: actions/upload-artifact@v3
        with:
          name: subscore
          path: Q${{matrix.q_num}}res_.txt
          retention-days: 1
      - name: Test Q${{matrix.q_num}}
        if: always()
        run: |
             # todo: indent change
             # this line is used when the header file should not be allowed to change
             # cp files/${{matrix.q_num}}/q.cc coding_grader/${{matrix.q_num}}/

             # this line is used when the header file should be allowed to change
             cp files/${{matrix.q_num}}/{q.cc,q.h} coding_grader/${{matrix.q_num}}/

             echo "--------- student test ---------"
             bazel run --config=asan --ui_event_filters=-info,-stdout,-stderr //files/${{matrix.q_num}}:student_test
             # if the 'student tests' doesn't pass, the script will skip this question and give 0 point
             if [ $? -ne 0 ] ; then  exit 1; fi

             echo "--------- grader test ---------"
             bazel run --config=asan --ui_event_filters=-info,-stdout,-stderr //coding_grader/${{matrix.q_num}}:grader_test 2>&1 | tee Q${{matrix.q_num}}res.txt
             # output the testing result to Q1res.txt, Q2res.txt...
             # copy the lines with 'OK' in Q1res_.txt, Q2res_.txt...
             grep "OK" Q${{matrix.q_num}}res.txt > Q${{matrix.q_num}}res_.txt
      - name: Upload result for Q${{matrix.q_num}}
        uses: actions/upload-artifact@v3
        with:
          # upload the subscore files
          name: subscore
          path: Q${{matrix.q_num}}res_.txt
          retention-days: 1

  collecting-result:
    name: Collecting result
    needs: [testing, setup]
    runs-on: ubuntu-22.04
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v3  
      - uses: actions/checkout@master
        with:
            repository: 'ee538/AutoGradingScript'
            path: 'grading_script'
      - uses: actions/checkout@master
        with:
            repository: ${{ fromJSON(needs.setup.outputs.matrix).grader_repo }}
            path: 'coding_grader'
      - name: Collect result
        uses: actions/download-artifact@v3
        with:
          # retrieve the subscore files
          name: subscore
      - name: Organize the total score (coding questions)
        if: always()
        run: |

             mkdir grades
             mv Q*res_.txt grades

             # everything can be actually written in Python, and please do that 
             # calculate the score for each question and output to 'ScoresCodingTotal.txt'
             python grading_script/coding_grades_total.py 2>&1 | tee ScoresCodingTotal.txt
             
             # add timestamp to ScoresCodingTotal.txt
             TZ='America/Los_Angeles' date >> ScoresCodingTotal.txt

             # clean temporary files
             rm -rf grades
             rm -rf ST_*
             rm -rf coding_grader
             
             # update repository
             git config --global user.email "ee538.autograder@gmail.com"
             git config --global user.name "AutograderEE538"
             git add ScoresCodingTotal.txt
             git commit -m "Add autograding results"
             git push origin HEAD:main -f
